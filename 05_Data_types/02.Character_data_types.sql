-- Для хранения строк в PostgreSQL используются следующие типы данных:
--
--------------
-- char(n)
--------------
-- Сейчас используется редко. n обозначает макс. длину строки, которую можно
-- вставить в поле этого типа. Если будет вставлено меньше, то в строку будут
-- добавлены пробелы до n включительно (padding).
--
--------------
-- varchar(n)
--------------
-- n обозначает макс. длину строки, которую можно вставить в поле этого типа.
-- padding'а как в случае с char(n) не происходит.
--
--------------
-- text
--------------
-- Используется для хранения больших текстовых документов. С точки зрения
-- производительности нет разницы между varchar и text.
--
-- Посмотреть кодировку, в которой будут храниться строки можно запросом:
show server_encoding;

--------------------------------------------------------------------------------
-- Полезные функции при работе с строками
--------------------------------------------------------------------------------

-- Результатом выполнения следующего запроса является NULL:
select 'a' || 'b' || null;

-- Если хотя бы один операнд оператора || равен NULL, то и всё выражение равно NULL.
-- Можно использовать функцию concat, если нужно пропускать NULL:

select concat('a', 'b', null);

-- Этот запрос возвращает 'ab'.

-- Некоторые типы данных автоматически преобразуются в строку в операторе ||:
select first_name || ' was created on ' || create_date
  from customer;

-- Здесь колонка create_date типа date автоматически была преобразована в строку.

-- Функция COALESCE возвращает первый аргумент, который не равен NULL. Часто её
-- используют для указания значения по-умолчанию для NULL:
select first_name || ' has email ' || coalesce(email, 'unknown')
  from customer;

-- Для людей, у которых нет эл. почты, будет подставлено значение 'unknown'.

-- Функция trim убирает пробельные символы в начале и конце строки:
select trim('  HELLO  ');

-- возвращает 'HELLO'.

-- Индексирование строк в SQL начинается с 1, т.е. в функциях наподобие substr
-- началом строки является 1.
