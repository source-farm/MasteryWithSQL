-- EXCEPT убирает из первой таблицы строки, которое есть во второй.
-- Нахождение фильмов, которые никогда не были арендованы:
(
    select film_id
      from film
)
except
(
        select film_id
          from rental
    inner join inventory using (inventory_id)
);

-- Просто EXCEPT убирает дублирующиеся строки. EXCEPT ALL их оставляет,
-- но своеобразным образом. Его работу можно описать так: для первого
-- значения из первой таблицы ищется совпадающее значение из второй.
-- Если совпадения нет, то значение из первой таблицы добавляется в финальный
-- результат. Если есть, то не добавляется и при этом совпадающее значение
-- из второй таблицы удаляется из этой таблицы, т.е. пара совпадающих
-- значений исчезает, не попадая в финальный результат. Далее то же самое
-- происходит с оставшимися значениями из первой таблицы.
-- Для нашего примера результатом выполнения будут значения 1 и 3, т.к.
-- для первой единицы есть совпадение во второй таблице, а для второй нет.
(
    select n
      from (values (1), (1), (3)) as t1(n)
)
except all
(
    select n
      from (values (1), (7), (8)) as t2(n)
);

-- Без каких-либо дополнительных конструкций к результату выполнения
-- операторов над множествами можно применить выражения ORDER BY и LIMIT:
(
    select n
      from (values (1), (2), (3)) as t1(n)
)
except
(
    select n
      from (values (4), (5), (6)) as t2(n)
)
order by n desc
limit 1;
-- Но если попытаться выполнить выражение WHERE или GROUP BY, то будет ошибка.
-- Чтобы исправить ситуацию можно воспользоваться подзапросами:
select n
  from (
           (
               select n
                 from (values (1), (2), (3)) as t1(n)
           )
           except
           (
               select n
                 from (values (4), (5), (6)) as t2(n)
           )
       ) as t(n)
 where n > 1;
